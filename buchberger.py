import polynomial as poly
import reduction as rd
import numpy as np
import math
import random

def buchberger_random(F):
    """
    The classic buchberger algorithm using random selection.
    @param F: a list of polynomials.
    @return: The GrÃ¶bner basis of the ideal generated by F represented as a list of polynomials.
    """

    assert all([isinstance(f, poly.Polynomial) for f in F]), 'The input must be a list of polynomials.'

    G = F
    P = set([frozenset([F[i], F[j]]) for i in range(len(F)) for j in range(i + 1, len(F))])
    while len(P) > 0:
        fg = random.sample(P, 1)[0]
        f, g = tuple(fg)
        P.remove(fg)
        r = rd.reduce_lst(rd.S(f, g), G)
        if not r.is_zero():
            P = P.union([frozenset([f, r]) for f in G])
            G = list(set(G).union([r]))

    return G
